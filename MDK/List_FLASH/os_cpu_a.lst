


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           ARM Cortex-M
                       3 Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.89
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;             Brian Nagel
   14 00000000         ;
   15 00000000         ; For       : ARMv7M Cortex-M3
   16 00000000         ; Mode      : Thumb2
   17 00000000         ; Toolchain : RealView Development Suite
   18 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   19 00000000         ;             ARM Developer Suite (ADS)
   20 00000000         ;             Keil uVision
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;                                           PUBLIC FUNCT
                       IONS
   25 00000000         ;*******************************************************
                       *************************************************
   26 00000000         
   27 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   28 00000000                 EXTERN           OSPrioCur
   29 00000000                 EXTERN           OSPrioHighRdy
   30 00000000                 EXTERN           OSTCBCur
   31 00000000                 EXTERN           OSTCBHighRdy
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000                 EXTERN           OS_CPU_ExceptStkBase
   35 00000000         
   36 00000000         
   37 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   38 00000000                 EXPORT           OS_CPU_SR_Restore
   39 00000000                 EXPORT           OSStartHighRdy
   40 00000000                 EXPORT           OSCtxSw
   41 00000000                 EXPORT           OSIntCtxSw
   42 00000000         ;EXPORT  OS_CPU_PendSVHandler
   43 00000000                 EXPORT           PendSV_Handler
   44 00000000         ;EXPORT  OSPendSV
   45 00000000         
   46 00000000         ;¿ÉÒÔ²Î¿¼core_cm3.h£¬¾ùÓÐÒÔÏÂº¯ÊýµÄÊµÏÖ 



ARM Macro Assembler    Page 2 


   47 00000000                 EXPORT           CPU_IntDis
   48 00000000                 EXPORT           CPU_IntEn
   49 00000000         
   50 00000000                 EXPORT           CPU_WaitForInt ; CPU½øÈëµÍ¹¦ºÄÄ
                                                            £Ê½£¬ÖÐ¶Ï»½ÐÑ
   51 00000000                 EXPORT           CPU_WaitForExcept ; CPU½øÈëµÍ¹¦
                                                            ºÄÄ£Ê½£¬Òì³£»½ÐÑ
   52 00000000                 EXPORT           CPU_RevBits
   53 00000000         
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         ;                                                EQUATES
                       
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000         
   58 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   59 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).  //PendSVÓÅÏÈ¼¶
                                                            
   60 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).  //É
                                                            èÖÃPendSVÖÐ¶ÏÓÅÏÈ¼¶
                                                            Îª×îµÍ
   61 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception. /
                                                            /¶ÔÖÐ¶Ï¿ØÖÆ¼°×´Ì¬¼Ä
                                                            ´æÆ÷ICSR(ucosÖÐ¸ÄÃû
                                                            ÎªNVIC_INT_CTRL£¬µØ
                                                            Ö·0xE000ED04)Ð´Èë0x
                                                            10000000¼´´¥·¢PendS
                                                            VÒì³£
   62 00000000         
   63 00000000 E000ED20 
                       NVIC_SYSPRI12
                               EQU              0xE000ED20  ; µ÷ÊÔ¼àÊÓÆ÷µÄÓÅÏÈ¼
                                                            ¶¼Ä´æÆ÷
   64 00000000 E000ED1F 
                       NVIC_SYSPRI11
                               EQU              0xE000ED1F  ; SVCÓÅÏÈ¼¶
   65 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; SysTickÓÅÏÈ¼¶
   66 00000000         ;*******************************************************
                       *************************************************
   67 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   68 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 3 


   69 00000000         
   70 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   71 00000000                 THUMB
   72 00000000                 REQUIRE8                     ;Ö¸¶¨µ±Ç°ÎÄ¼þÒªÇó¶Ñ
                                                            Õ»°Ë×Ö½Ú¶ÔÆë
   73 00000000                 PRESERVE8                    ;Ö¸¶¨µ±Ç°ÎÄ¼þ±£³Ö¶Ñ
                                                            Õ»°Ë×Ö½Ú¶ÔÆë
   74 00000000         
   75 00000000         ;*******************************************************
                       *************************************************
   76 00000000         ;                                    DISABLE and ENABLE 
                       INTERRUPTS
   77 00000000         ;
   78 00000000         ; Description : Disable/Enable interrupts.
   79 00000000         ;
   80 00000000         ; Prototypes  : void  CPU_IntDis(void);
   81 00000000         ;               void  CPU_IntEn (void);
   82 00000000         ;*******************************************************
                       *************************************************
   83 00000000         
   84 00000000         CPU_IntDis
   85 00000000 B672            CPSID            I
   86 00000002 4770            BX               LR
   87 00000004         
   88 00000004         
   89 00000004         CPU_IntEn
   90 00000004 B662            CPSIE            I
   91 00000006 4770            BX               LR
   92 00000008         
   93 00000008         ;*******************************************************
                       *************************************************
   94 00000008         ;                                         WAIT FOR INTER
                       RUPT
   95 00000008         ;
   96 00000008         ; Description : Enters sleep state, which will be exited
                        when an interrupt is received.
   97 00000008         ;
   98 00000008         ; Prototypes  : void  CPU_WaitForInt (void)
   99 00000008         ;
  100 00000008         ; Argument(s) : none.
  101 00000008         ;*******************************************************
                       *************************************************
  102 00000008         
  103 00000008         CPU_WaitForInt
  104 00000008 BF30            WFI                          ; Wait for interrup
                                                            t
  105 0000000A 4770            BX               LR
  106 0000000C         
  107 0000000C         ;*******************************************************
                       *************************************************
  108 0000000C         ;                                         WAIT FOR EXCEP
                       TION
  109 0000000C         ;
  110 0000000C         ; Description : Enters sleep state, which will be exited
                        when an exception is received.
  111 0000000C         ;
  112 0000000C         ; Prototypes  : void  CPU_WaitForExcept (void)
  113 0000000C         ;



ARM Macro Assembler    Page 4 


  114 0000000C         ; Argument(s) : none.
  115 0000000C         ;*******************************************************
                       *************************************************
  116 0000000C         
  117 0000000C         CPU_WaitForExcept
  118 0000000C BF20            WFE                          ; Wait for exceptio
                                                            n
  119 0000000E 4770            BX               LR
  120 00000010         
  121 00000010         ;*******************************************************
                       *************************************************
  122 00000010         ;                                            CPU_RevBits
                       ()
  123 00000010         ;                                            REVERSE BIT
                       S
  124 00000010         ;
  125 00000010         ; Description : Reverses the bits in a data value.
  126 00000010         ;
  127 00000010         ; Prototypes  : CPU_DATA  CPU_RevBits(CPU_DATA  val);
  128 00000010         ;
  129 00000010         ; Argument(s) : val         Data value to reverse bits.
  130 00000010         ;
  131 00000010         ; Return(s)   : Value with all bits in 'val' reversed (s
                       ee Note #1).
  132 00000010         ;
  133 00000010         ; Caller(s)   : Application.
  134 00000010         ;
  135 00000010         ;               This function is an INTERNAL CPU module 
                       function but MAY be called by application function(s).
  136 00000010         ;
  137 00000010         ; Note(s)     : (1) The final, reversed data value for '
                       val' is such that :
  138 00000010         ;
  139 00000010         ;                       'val's final bit  0       =  'va
                       l's original bit  N
  140 00000010         ;                       'val's final bit  1       =  'va
                       l's original bit (N - 1)
  141 00000010         ;                       'val's final bit  2       =  'va
                       l's original bit (N - 2)
  142 00000010         ;
  143 00000010         ;                               ...                     
                             ...
  144 00000010         ;
  145 00000010         ;                       'val's final bit (N - 2)  =  'va
                       l's original bit  2
  146 00000010         ;                       'val's final bit (N - 1)  =  'va
                       l's original bit  1
  147 00000010         ;                       'val's final bit  N       =  'va
                       l's original bit  0
  148 00000010         ;*******************************************************
                       *************************************************
  149 00000010         
  150 00000010         CPU_RevBits
  151 00000010 FA90 F0A0       RBIT             R0, R0      ; Reverse bits
  152 00000014 4770            BX               LR
  153 00000016         
  154 00000016         ;*******************************************************
                       *************************************************
  155 00000016         ;                                   CRITICAL SECTION MET



ARM Macro Assembler    Page 5 


                       HOD 3 FUNCTIONS
  156 00000016         ;
  157 00000016         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
  158 00000016         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
  159 00000016         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
  160 00000016         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
  161 00000016         ;              into the CPU's status register.
  162 00000016         ;
  163 00000016         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
  164 00000016         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
  165 00000016         ;
  166 00000016         ;
  167 00000016         ; Note(s)    : 1) These functions are used in general li
                       ke this:
  168 00000016         ;
  169 00000016         ;                 void Task (void *p_arg)
  170 00000016         ;                 {
  171 00000016         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
  172 00000016         ;                     OS_CPU_SR  cpu_sr;
  173 00000016         ;                 #endif
  174 00000016         ;
  175 00000016         ;                          :
  176 00000016         ;                          :
  177 00000016         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  178 00000016         ;                          :
  179 00000016         ;                          :
  180 00000016         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  181 00000016         ;                          :
  182 00000016         ;                          :
  183 00000016         ;                 }
  184 00000016         ;*******************************************************
                       *************************************************
  185 00000016         
  186 00000016         OS_CPU_SR_Save
  187 00000016 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  188 0000001A B672            CPSID            I
  189 0000001C 4770            BX               LR
  190 0000001E         
  191 0000001E         OS_CPU_SR_Restore
  192 0000001E F380 8810       MSR              PRIMASK, R0
  193 00000022 4770            BX               LR
  194 00000024         
  195 00000024         ;*******************************************************
                       *************************************************
  196 00000024         ;                                          START MULTITA
                       SKING
  197 00000024         ;                                       void OSStartHigh
                       Rdy(void)
  198 00000024         ;



ARM Macro Assembler    Page 6 


  199 00000024         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  200 00000024         ;              the first task to start.
  201 00000024         ;
  202 00000024         ;           2) OSStartHighRdy() MUST:
  203 00000024         ;              a) Setup PendSV exception priority to low
                       est;
  204 00000024         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  205 00000024         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base;
  206 00000024         ;              d) Set OSRunning to TRUE;
  207 00000024         ;              e) Trigger PendSV exception;
  208 00000024         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  209 00000024         ;*******************************************************
                       *************************************************
  210 00000024         
  211 00000024         OSStartHighRdy                       ; ÉèÖÃPendSVÒì³£ÓÅÏ
                                                            È¼¶²¢´¥·¢PendSV´´½¨
                                                            µÚÒ»¸öÈÎÎñ
  212 00000024 481F            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  213 00000026 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI ; the lowe
                                                            st priority for Pen
                                                            dSV exception
  214 0000002A 7001            STRB             R1, [R0]
  215 0000002C         
  216 0000002C 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  217 0000002E F380 8809       MSR              PSP, R0
  218 00000032         
  219 00000032 481D            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  220 00000034 6801            LDR              R1, [R0]
  221 00000036 F381 8808       MSR              MSP, R1
  222 0000003A         
  223 0000003A 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  224 0000003C 2101            MOVS             R1, #1
  225 0000003E 7001            STRB             R1, [R0]
  226 00000040         
  227 00000040 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  228 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  229 00000046 6001            STR              R1, [R0]
  230 00000048         
  231 00000048 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  232 0000004A         
  233 0000004A         OSStartHang
  234 0000004A E7FE            B                OSStartHang ; Should never get 



ARM Macro Assembler    Page 7 


                                                            here
  235 0000004C         
  236 0000004C         
  237 0000004C         ;*******************************************************
                       *************************************************
  238 0000004C         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  239 0000004C         ;                                           void OSCtxSw
                       (void)
  240 0000004C         ;
  241 0000004C         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  242 0000004C         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  243 0000004C         ;*******************************************************
                       *************************************************
  244 0000004C         
  245 0000004C         OSCtxSw
  246 0000004C 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  247 0000004E F04F 5180       LDR              R1, =NVIC_PENDSVSET
  248 00000052 6001            STR              R1, [R0]
  249 00000054 4770            BX               LR
  250 00000056         
  251 00000056         ;*******************************************************
                       *************************************************
  252 00000056         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  253 00000056         ;                                         void OSIntCtxS
                       w(void)
  254 00000056         ;
  255 00000056         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  256 00000056         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  257 00000056         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  258 00000056         ;*******************************************************
                       *************************************************
  259 00000056         
  260 00000056         OSIntCtxSw
  261 00000056 4816            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  262 00000058 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  263 0000005C 6001            STR              R1, [R0]
  264 0000005E 4770            BX               LR
  265 00000060         
  266 00000060         ;*******************************************************
                       *************************************************
  267 00000060         ;                                         HANDLE PendSV 
                       EXCEPTION
  268 00000060         ;                                     void OS_CPU_PendSV
                       Handler(void)
  269 00000060         ;
  270 00000060         ; Note(s) : 1) PendSV is used to cause a context switch.



ARM Macro Assembler    Page 8 


                         This is a recommended method for performing
  271 00000060         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  272 00000060         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  273 00000060         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  274 00000060         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  275 00000060         ;              a thread or occurs due to an interrupt or
                        exception.
  276 00000060         ;
  277 00000060         ;           2) Pseudo-code is:
  278 00000060         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  279 00000060         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  280 00000060         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  281 00000060         ;              d) Call OSTaskSwHook();
  282 00000060         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  283 00000060         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  284 00000060         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  285 00000060         ;              h) Restore R4-R11 from new process stack;
                       
  286 00000060         ;              i) Perform exception return which will re
                       store remaining context.
  287 00000060         ;
  288 00000060         ;           3) On entry into PendSV handler:
  289 00000060         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  290 00000060         ;                 xPSR, PC, LR, R12, R0-R3
  291 00000060         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  292 00000060         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  293 00000060         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  294 00000060         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  295 00000060         ;
  296 00000060         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  297 00000060         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  298 00000060         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  299 00000060         ;*******************************************************
                       *************************************************
  300 00000060         ;OS_CPU_PendSVHandler
  301 00000060         
  302 00000060         PendSV_Handler                       ; Òì³£·þÎñÖÐ¿ÉÄÜ»áÊ
                                                            ¹ÓÃMSP£¬ËùÒÔ²»ÄÜÊÖ¶
                                                            ¯PUSHÑ¹¼Ä´æÆ÷
  303 00000060 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 



ARM Macro Assembler    Page 9 


                                                            switch   Ê¹ÓÃË«¶ÑÕ»
                                                            Ê±£¬ÊÇ·ñ²»ÐèÒª¹Ø±ÕÖ
                                                            Ð¶Ï¿ª¹Ø£¿
  304 00000062 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  305 00000066 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  306 00000068         
  307 00000068 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack 8*4bytes=3
                                                            2bytes=0x20bytes
  308 0000006A E880 0FF0       STM              R0, {R4-R11}
  309 0000006E         
  310 0000006E 4911            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  311 00000070 6809            LDR              R1, [R1]
  312 00000072 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  313 00000074         
  314 00000074         ; At this point, entire context of process has been save
                       d
  315 00000074         OS_CPU_PendSVHandler_nosave
  316 00000074 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  317 00000076 4810            LDR              R0, =OSTaskSwHook ; OSTaskSwHoo
                                                            k(); here do nothin
                                                            g
  318 00000078 4780            BLX              R0
  319 0000007A F85D EB04       POP              {R14}
  320 0000007E         
  321 0000007E 480F            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  322 00000080 490F            LDR              R1, =OSPrioHighRdy
  323 00000082 780A            LDRB             R2, [R1]
  324 00000084 7002            STRB             R2, [R0]
  325 00000086         
  326 00000086 480B            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  327 00000088 490E            LDR              R1, =OSTCBHighRdy
  328 0000008A 680A            LDR              R2, [R1]
  329 0000008C 6002            STR              R2, [R0]
  330 0000008E         
  331 0000008E 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  332 00000090 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  333 00000094 3020            ADDS             R0, R0, #0x20
  334 00000096 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  335 0000009A F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  336 0000009E B662            CPSIE            I



ARM Macro Assembler    Page 10 


  337 000000A0 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  338 000000A2         
  339 000000A2                 END
              00 00 E000ED22 
              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\obj_fl
ash\os_cpu_a.d -o.\obj_flash\os_cpu_a.o -IE:\Tools_installed_on_Win7\Keil_For_A
RM\ARM\RV31\INC -IE:\Tools_installed_on_Win7\Keil_For_ARM\ARM\PACK\ARM\CMSIS\3.
20.4\CMSIS\Include -IE:\Tools_installed_on_Win7\Keil_For_ARM\ARM\Inc\ST\STM32F1
0x --predefine="__MICROLIB SETA 1" --list=.\list_flash\os_cpu_a.lst uC-Ports\AR
M-Cortex-M3\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 70 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_IntDis 00000000

Symbol: CPU_IntDis
   Definitions
      At line 84 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 47 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000004

Symbol: CPU_IntEn
   Definitions
      At line 89 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 48 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: CPU_IntEn used once
CPU_RevBits 00000010

Symbol: CPU_RevBits
   Definitions
      At line 150 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 52 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: CPU_RevBits used once
CPU_WaitForExcept 0000000C

Symbol: CPU_WaitForExcept
   Definitions
      At line 117 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 51 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: CPU_WaitForExcept used once
CPU_WaitForInt 00000008

Symbol: CPU_WaitForInt
   Definitions
      At line 103 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 50 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: CPU_WaitForInt used once
OSCtxSw 0000004C

Symbol: OSCtxSw
   Definitions
      At line 245 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 40 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000056

Symbol: OSIntCtxSw



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 260 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 41 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000004A

Symbol: OSStartHang
   Definitions
      At line 233 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 234 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 00000024

Symbol: OSStartHighRdy
   Definitions
      At line 211 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 39 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler_nosave 00000074

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 315 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 305 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 0000001E

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 191 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 38 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000016

Symbol: OS_CPU_SR_Save
   Definitions
      At line 186 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 37 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 00000060

Symbol: PendSV_Handler
   Definitions
      At line 302 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 43 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: PendSV_Handler used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 58 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 227 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
      At line 246 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
      At line 261 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 61 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 228 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
      At line 247 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
      At line 262 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 60 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 213 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI11 E000ED1F

Symbol: NVIC_SYSPRI11
   Definitions
      At line 64 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      None
Comment: NVIC_SYSPRI11 unused
NVIC_SYSPRI12 E000ED20

Symbol: NVIC_SYSPRI12
   Definitions
      At line 63 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      None
Comment: NVIC_SYSPRI12 unused
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 59 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 212 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 65 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: NVIC_SYSPRI15 unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 28 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 321 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 29 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 322 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 27 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 223 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 30 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 310 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
      At line 326 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 31 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 327 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 317 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 34 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
   Uses
      At line 219 in file uC-Ports\ARM-Cortex-M3\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
362 symbols in table
